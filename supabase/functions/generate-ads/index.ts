
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createOpenAIClient } from "./openai.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type'
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { systemMessage, userMessage, language = 'portuguese', temperature = 0.7 } = await req.json();
    
    // Validate input data
    if (!systemMessage || !userMessage) {
      throw new Error("Both systemMessage and userMessage are required");
    }
    
    console.log(`Starting ad generation with language: ${language}`);
    console.log(`System message preview: ${systemMessage.substring(0, 100)}...`);
    console.log(`User message preview: ${userMessage.substring(0, 100)}...`);
    
    const openai = createOpenAIClient(Deno.env.get('OPENAI_API_KEY') || '');

    // Make the API call using the chat completion endpoint with gpt-4o
    const response = await openai.createChatCompletion({
      model: "gpt-4o",
      temperature: temperature,
      messages: [
        {
          role: "system",
          content: systemMessage
        },
        {
          role: "user",
          content: userMessage
        }
      ]
    });

    const content = response.choices[0]?.message?.content;
    if (!content) {
      throw new Error("No content generated by the API");
    }

    console.log("Content received from OpenAI API");
    console.log("Response preview:", content.substring(0, 200) + "...");

    try {
      // Try to parse the JSON response
      let parsedContent;
      
      // First attempt: direct JSON parse
      try {
        parsedContent = JSON.parse(content);
      } catch (jsonError) {
        console.log("Direct JSON parse failed, trying to extract JSON from text");
        
        // Second attempt: Try to extract JSON from the content if it's wrapped in markdown or other text
        const jsonMatch = content.match(/```(?:json)?\s*([\s\S]*?)```/);
        if (jsonMatch && jsonMatch[1]) {
          try {
            parsedContent = JSON.parse(jsonMatch[1].trim());
          } catch (extractedJsonError) {
            console.error("Failed to parse extracted JSON:", extractedJsonError);
            throw new Error("Invalid JSON format in extracted content");
          }
        } else {
          throw new Error("Could not extract JSON from response");
        }
      }
      
      // Validate the parsed content has expected structure
      if (!parsedContent || typeof parsedContent !== 'object') {
        throw new Error("Invalid response format: Not a valid JSON object");
      }
      
      // Return the successfully parsed content
      return new Response(
        JSON.stringify({ 
          success: true, 
          content: parsedContent
        }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    } catch (parseError) {
      console.error("Error parsing response:", parseError);
      // Return both the error and the raw content for debugging
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: `Error parsing response: ${parseError.message}`,
          rawContent: content 
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 500 
        }
      );
    }
  } catch (error) {
    console.error("Error in generate-ads function:", error);
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message || "Unknown error" 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500 
      }
    );
  }
});
