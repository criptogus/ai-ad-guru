
// fix-all-build-issues.js
import fs from 'fs';
import { execSync } from 'child_process';
import path from 'path';

console.log('üõ†Ô∏è Iniciando script de corre√ß√£o completa para problemas de build...');

// 1. Corrigir o m√≥dulo nativo do Rollup
console.log('\nüì¶ Corrigindo m√≥dulo nativo do Rollup...');
try {
  execSync('node native-module-fix.js', { stdio: 'inherit' });
  console.log('‚úÖ M√≥dulo nativo do Rollup corrigido');
} catch (error) {
  console.error('‚ùå Erro ao corrigir m√≥dulo nativo do Rollup:', error);
  // Continuar com o script mesmo se esta parte falhar
}

// 2. Criar configura√ß√£o TypeScript alternativa
console.log('\nüìù Criando configura√ß√£o TypeScript alternativa...');
const tsConfigVite = {
  compilerOptions: {
    target: "ESNext",
    useDefineForClassFields: true,
    lib: ["DOM", "DOM.Iterable", "ESNext"],
    allowJs: false,
    skipLibCheck: true,
    esModuleInterop: true,
    allowSyntheticDefaultImports: true,
    strict: true,
    forceConsistentCasingInFileNames: true,
    module: "ESNext",
    moduleResolution: "Node",
    resolveJsonModule: true,
    isolatedModules: true,
    noEmit: false,
    composite: true,
    declaration: true,
    jsx: "react-jsx",
    baseUrl: ".",
    paths: {
      "@/*": ["./src/*"]
    }
  },
  include: ["vite.config.ts"]
};

// Escrever o arquivo de configura√ß√£o
fs.writeFileSync('tsconfig.vite.json', JSON.stringify(tsConfigVite, null, 2));
console.log('‚úÖ Criado arquivo tsconfig.vite.json');

// 3. Compilar o vite.config.ts com a nova configura√ß√£o
console.log('\nüîÑ Compilando vite.config.ts...');
try {
  execSync('npx tsc -p tsconfig.vite.json', { stdio: 'inherit' });
  console.log('‚úÖ vite.config.ts compilado com sucesso');
} catch (error) {
  console.error('‚ùå Erro ao compilar vite.config.ts:', error);
}

// 4. Executar o build com vari√°veis de ambiente ajustadas
console.log('\nüöÄ Executando build com corre√ß√µes aplicadas...');
try {
  execSync('vite build --mode development', {
    stdio: 'inherit',
    env: {
      ...process.env,
      ROLLUP_NATIVE_SKIP: 'true',
      ROLLUP_PURE_JS: 'true',
      PUPPETEER_SKIP_DOWNLOAD: 'true',
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'true',
      PUPPETEER_SKIP_VALIDATE_CHROMIUM_INSTALLATION: 'true',
      BROWSER: 'none',
      NODE_OPTIONS: '--no-warnings'
    }
  });
  console.log('‚úÖ Build conclu√≠do com sucesso!');
} catch (error) {
  console.error('‚ùå Erro ao executar o build:', error);
  console.log('\nüîç Tentando solu√ß√£o alternativa...');
  
  // 5. Solu√ß√£o alternativa se o build falhar
  try {
    execSync('vite build --mode development --config vite.config.js', {
      stdio: 'inherit',
      env: {
        ...process.env,
        ROLLUP_NATIVE_SKIP: 'true',
        ROLLUP_PURE_JS: 'true'
      }
    });
    console.log('‚úÖ Build alternativo conclu√≠do com sucesso!');
  } catch (alternativeError) {
    console.error('‚ùå Todas as tentativas de build falharam:', alternativeError);
    process.exit(1);
  }
}

console.log('\n‚ú® Processo de corre√ß√£o completo! O projeto deve estar funcionando agora.');
