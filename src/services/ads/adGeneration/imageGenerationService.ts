
import { supabase } from "@/integrations/supabase/client";

/**
 * Par√¢metros de contexto para a gera√ß√£o de imagem.
 */
interface ImageGenerationParams {
  companyName?: string;
  brandTone?: string;
  industry?: string;
  format?: string;
  adContext?: any;
  companyDescription?: string;
  targetAudience?: string;
  objective?: string;
  adType?: string;
  language?: string;
  model?: string;
  [key: string]: any;
}

/**
 * Utilit√°rio para truncar strings no log.
 * @param str Texto a ser truncado.
 * @param max Tamanho m√°ximo.
 */
const truncate = (str: string, max = 100) =>
  str && typeof str === 'string' ? (str.length > max ? str.substring(0, max) + "..." : str) : '[texto inv√°lido]';

/**
 * Gera uma imagem para an√∫ncio com base em um prompt e contexto adicional.
 * Retorna a URL da imagem gerada ou `null` em caso de erro.
 */
export const generateAdImage = async (
  prompt: string,
  additionalInfo?: ImageGenerationParams
): Promise<string | null> => {
  try {
    if (!prompt || prompt.trim().length < 10) {
      console.error("‚ùå Prompt inv√°lido ou muito curto:", prompt);
      throw new Error("Prompt de imagem inv√°lido: muito curto ou ausente");
    }

    const format = additionalInfo?.format ||
      (additionalInfo?.adType === "instagram" ? "square" : "landscape");
    const adType = additionalInfo?.adType || "instagram";
    const language = additionalInfo?.language || "portuguese"; // For√ßar portugu√™s por padr√£o

    // Garante que o prompt est√° em portugu√™s
    const languagePrompt = language === "portuguese" && !prompt.toLowerCase().includes("portugu√™s") ? 
      `[GERAR EM PORTUGU√äS] ${prompt}` : prompt;

    // Prompt enriquecido e contextualizado
    const enhancedPrompt = `
üìå Cria√ß√£o de Imagem para An√∫ncio ${adType.toUpperCase()} EM PORTUGU√äS

Marca: ${additionalInfo?.companyName || 'empresa'}
Setor: ${additionalInfo?.industry || 'setor n√£o especificado'}
P√∫blico-Alvo: ${additionalInfo?.targetAudience || 'p√∫blico geral'}
Tom de Voz: ${additionalInfo?.brandTone || 'profissional'}

üéØ Objetivo: ${additionalInfo?.objective || 'convers√£o'}

üß† Instru√ß√µes:
- A imagem deve ser fotorrealista, sem texto (NO TEXT!) e de alta qualidade.
- Alta qualidade visual, ilumina√ß√£o profissional.
- Fundo limpo e moderno.
- Sem distor√ß√µes ou marcas d'√°gua.
- IMPORTANTE: CRIAR SOMENTE EM PORTUGU√äS BRASILEIRO!

üì• Prompt do usu√°rio:
${languagePrompt}
`;

    console.log("üñºÔ∏è Enviando request para gera√ß√£o de imagem com prompt:", truncate(enhancedPrompt, 150));

    const requestBody = {
      prompt: enhancedPrompt,
      additionalInfo: {
        ...additionalInfo,
        format,
        adType,
        language: "portuguese", // Garantir idioma portugu√™s
        industry: additionalInfo?.industry || '',
        brandName: additionalInfo?.companyName || '',
        companyDescription: additionalInfo?.companyDescription || '',
        targetAudience: additionalInfo?.targetAudience || '',
        objective: additionalInfo?.objective || ''
      }
    };

    const { data, error } = await supabase.functions.invoke('generate-image-gpt4o', {
      body: requestBody,
    });

    if (error) {
      console.error("üö® Erro na fun√ß√£o Supabase:", error);
      throw new Error(error.message || "Erro ao chamar a fun√ß√£o de gera√ß√£o de imagem.");
    }

    if (!data?.success || typeof data.imageUrl !== 'string' || !data.imageUrl.startsWith('http')) {
      console.warn("‚ö†Ô∏è URL de imagem inv√°lida retornada:", data?.imageUrl);
      console.warn("Resposta completa:", JSON.stringify(data, null, 2));
      throw new Error(data?.error || "Imagem inv√°lida recebida da IA.");
    }

    console.log("‚úÖ Imagem gerada com sucesso:", truncate(data.imageUrl, 50));
    return data.imageUrl;
  } catch (error) {
    console.error("üö® Erro na gera√ß√£o de imagem:", error);
    return null;
  }
};
